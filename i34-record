#!/usr/bin/perl -w
# Copyright 2009 Abhijit Menon-Sen <ams@toroid.org>
#

use POSIX;
use LWP v5.825;
use Data::Dumper;
use Fcntl qw( :flock );
use POE qw( Component::Server::TCP
            Component::Client::TCP );


{
    package HTTP::MessageParser;

    our $CRLF =
        '\x0D?\x0A';
    our $LWS =
        qr/(?:(?:$CRLF)?[ \t]+)*/;
    our $TOKEN =
        qr/[\x21\x23-\x27\x2a\x2b\x2d\x2e\x30-\x39\x41-\x5a\x5e-\x7a\x7c\x7e]+/;
    our $VERSION =
        qr/HTTP[ \t]*\/[ \t]*\d+[ \t]*\.[ \t]*\d+/i;
}


# A typical invocation looks like this:
#
# ./i34-record [-t|-v] from localhost:8888 to foo.example.com:80 in foo
#
# This tells the proxy to accept HTTP connections on localhost:8888,
# forward them to foo.example.com, and maintain a journal of requests
# and responses in a directory named foo.
#
# The "in foo" clause is optional. If omitted, a directory name is
# chosen based on the date and a sequence number (e.g. 20080101-1).
# It is an error to specify the name of an existing directory (thus
# existing transcripts will never be overwritten).
#
# If specified, -t(ransparent) makes i34-record forward the same Host:
# value that the client sends it (which is unlikely to please a server
# that isn't expecting to be transparently proxied). The default is to
# use the server's own hostname:port.
#
# If specified, -v enables more verbose debug output.
#
# The noise-words "from", "to", and "in" are also optional.

sub help {
    die "Syntax: $0 from <host:port> to <server-url> in <directory>\n";
}

# Where should we listen for connections?
# This argument is assumed to be in "localhost:8889" form.

help() unless @ARGV >= 1;

$verbose = 0;
$transparent = 0;
while ( $ARGV[0] =~ /^-/ ) {
    if ( $ARGV[0] eq "-t" ) {
        $transparent = 1;
    }
    elsif ( $ARGV[0] eq "-v" ) {
        $verbose++;
    }
    shift @ARGV;
}

shift @ARGV if $ARGV[0] eq "from";
$from = shift @ARGV || help;
($fromhost, $fromport) = split /:/, $from, 2;

# Where should we forward those connections to?
# This argument is also assumed to be in "s.foo.org:8889" form.

help() unless @ARGV >= 1;
shift @ARGV if $ARGV[0] eq "to";
$to = shift @ARGV || help;
($tohost, $toport) = split /:/, $to, 2;
$toport ||= 80;

# Where should we record requests and responses?
# We need a name for a directory we will create, either from the command
# line, or based on today's date.

if ( @ARGV ) {
    shift @ARGV if $ARGV[0] eq "in";
    $recorddir = shift @ARGV || help;
}
else {
    $i = 1;
    $date = strftime( "%Y%m%d", localtime );
    $i++ while -d "$date-$i";
    $recorddir = "$date-$i";
}

die "$0: Won't record to existing directory $recorddir.\n" if -d $recorddir;

# Set up the journal, and the means to manage it.
#
# The directory we create will contain two kinds of files:
#
# 1. A file named journal, which contains one timestamped entry per HTTP
# connection processed by the proxy.
#
# 2. As many numbered files as there are entries in the journal, each
# containing the requests and responses exchanged over a single HTTP
# connection, and named by the process's sequence number.

$connections = 0;

unless ( mkdir $recorddir, 0755 ) {
    die "$0: Can't create directory $recorddir: $!\n";
}

open( JOURNAL, ">", "$recorddir/journal" ) || die "$recorddir/journal: $!\n";
select( (select(JOURNAL), $|=1)[0] );

print "# i34-record from $from to $to in $recorddir\n";
print JOURNAL "# i34-record from $from to $to in $recorddir\n";

# We create a TCP server to accept requests and spawn a TCP client that
# connects to the origin web server, then relay requests and responses
# between the two.

POE::Component::Server::TCP->new(
    Hostname => $fromhost,
    Port => $fromport,

    ClientFilter => Filter::HTTP->new( 0, $verbose ),

    ClientConnected =>
        sub {
            my $heap = $_[HEAP];

            # Make an entry for this new connection in the journal, and
            # open a file to record a transcript of the session.

            my $now = POSIX::strftime( "%Y%m%dT%H%M%S", localtime );
            my $seq = ++$connections;

            print main::JOURNAL "[$now] $seq\n";
            open( RECORD, "+>", "$recorddir/$seq" ) or
                die "Can't open $recorddir/$seq: $!\n";
            select( ( select(RECORD), $|=1 )[0] );

            $heap->{record} = \*RECORD;
            $heap->{connection} = $seq;

            print "[$seq] connected\n";

            spawn_ua();
        },

    ClientInput =>
        sub {
            my ( $heap, $m ) = @_[ HEAP, ARG0 ];

            unless ( defined $m ) {
                $_[KERNEL]->yield( "shutdown" );
                return;
            }

            # Tell the origin server to send us as plain a response as
            # it can (no compression etc.).

            my $r = $m->{object};
            $r->remove_header( 'TE' );
            $r->header( Accept_Encoding => "" );
            $r->header(
                Host => $transparent ?
                    "$fromhost:$fromport" : "$tohost:$toport"
            );

            $heap->{requests}++;
            write_message( @$heap{qw/record connection requests/}, $r );
            $_[KERNEL]->post(
                $heap->{proxy_ua} => send_request => $r
            );

            print "[", $heap->{connection}, "] ",
                  "request ", $heap->{requests}, ": ",
                  $r->method, " ", $r->uri->as_string, "\n";
        },

    ClientError => sub {},
    ClientDisconnected => \&client_closed,

    InlineStates => {
        send_response =>
            sub {
                my ( $heap, $m ) = @_[ HEAP, ARG0 ];

                my $r = $m->{object};
                $heap->{responses}++;
                write_message( @$heap{qw/record connection responses/}, $r );
                $heap->{client}->put( $m->{text} );

                my $ct = $r->content_type;
                print "[", $heap->{connection}, "] ",
                      "response ", $heap->{responses}, ": ",
                      $r->status_line, ( $ct ? " ($ct)" : "" ), "\n";
            },

        _child =>
            sub {
                if ( $_[ARG0] eq "create" ) {
                    $_[HEAP]->{proxy_ua} = $_[ARG1]->ID;
                }
            },
    }
);

sub spawn_ua {
    POE::Component::Client::TCP->new(
        RemoteAddress => $tohost,
        RemotePort => $toport,

        Started =>
            sub {
                $_[HEAP]->{proxy_server} = $_[SENDER]->ID;
            },

        Filter => Filter::HTTP->new( 1, $verbose ),

        Connected =>
            sub {
                my $heap = $_[HEAP];

                if ( exists $heap->{request_queue} ) {
                    # If the client sent us any requests before we
                    # connected to the server, send them on now.
                    $heap->{server}->put( @{$heap->{request_queue}} );
                    delete $heap->{request_queue};
                }
            },

        ServerInput =>
            sub {
                my ( $heap, $m ) = @_[ HEAP, ARG0 ];

                unless ( defined $m ) {
                    $_[KERNEL]->yield( "shutdown" );
                    return;
                }

                $r = $m->{object};
                # A hackish but fast way to remove comments.
                $r->decode();
                ${$r->content_ref} =~ s/^<!--.*?-->$//gsm;

                $_[KERNEL]->post(
                    $heap->{proxy_server} => send_response => $m
                );
            },

        ServerError => \&server_closed,
        Disconnected => \&server_closed,

        InlineStates => {
            send_request =>
                sub {
                    my ( $heap, $request ) = @_[ HEAP, ARG0 ];

                    if ( $heap->{connected} ) {
                        $heap->{server}->put( $request );
                    } else {
                        push @{ $heap->{request_queue} }, $request;
                    }
                }
        },
    );
}

sub client_closed {
    my $heap = $_[HEAP];

    if ( $heap->{proxy_ua} ) {
        $_[KERNEL]->post( $heap->{proxy_ua} => "shutdown" );
    }
    print "[", $heap->{connection}, "] disconnected\n";
}

sub server_closed {
    $_[KERNEL]->post( $_[HEAP]->{proxy_server} => "shutdown" );
}

POE::Kernel->run();
exit 0;

# This function is responsible for writing HTTP requests and responses
# to a log file in a format that is both human-readable and parseable.
# It duplicates parts of various HTTP::*::as_string() methods.

sub write_message
{
    my ( $record, $connection, $num, $m ) = @_;

    local *RECORD = $record;
    my $now = POSIX::strftime( "%Y%m%dT%H%M%S", localtime );

    my ( $prefix, $start, $type );
    if ( $m->isa( 'HTTP::Request' ) ) {
        $prefix = "C";
        $start = join " ", $m->method, $m->uri->as_string, $m->protocol;
        $type = "Request";
    }
    elsif ( $m->isa( 'HTTP::Response' ) ) {
        $prefix = "S";
        $start = join " ", $m->protocol, $m->status_line;
        $type = "Response";
    }

    # If there is an entity body and it contains only text, we include
    # it inline for convenience. Otherwise we write the contents to a
    # file and include a reference to it.

    my ( @body_lines, $filename );
    if ( length $m->content ) {
        if ( $m->content !~ /[^\r\n\040-\176]/ ) {
            push @body_lines, split /\n/, $m->content;
            if ( $body_lines[-1] =~ /\n$/ ) {
                push @body_lines, "";
            }
        }
        else {
            $filename = $connection .".". $prefix .".". $num;
            open( F, ">", "$recorddir/$filename" ) or
                die "$recorddir/filename: $!\n";
            syswrite( F, $m->content );
            close( F );
        }
    }

    print RECORD "[$now] $type #$num\n";
    print RECORD
        map { "$prefix: $_\n" }
            $start, header_lines( $m ), "", @body_lines;
    if ( $filename ) {
        print RECORD "F: [$filename]\n";
    }
    print RECORD "\n";
}

sub header_lines {
    my ( $m ) = @_;

    my @headers;
    $m->headers->scan(sub {
        my ( $field, $value ) = @_;

        $field =~ s/^://;
        if ( $value =~ /\n/ ) {
            $value =~ s/\s+$//;
            $value =~ s/\n\n+/\n/g;
            $value =~ s/\n([^\040\t])/\n $1/g;
        }

        my @values = split /\n/, $value;
        if ( $field ne "Via" &&
             $field ne "X-Forwarded-For" )
        {
            my $value = shift @values;
            push @headers, "$field: $value";
            push @headers, @values;
        }
    });

    return @headers;
}

package HTTP::MessageParser;

use HTTP::Request;
use HTTP::Response;

sub new {
    my ($class, $type, $verbose) = @_;
    bless {
        state => 0,
        type => $type,
        object => undef,
        verbose => $verbose || 0,
        message => "",
        buffer => "",
        error => "",
    }, $class;
}

sub reset {
    my $self = shift;
    $self->{state} = 0;
    $self->{error} = "";
    $self->{object} = undef;
    $self->{message} = "";
}

sub debug {
    my ($self, $string, $level) = @_;
    $level ||= 1;
    if ( $self->{verbose} >= $level ) {
        print ">>> ", $string, "\n";
    }
}

sub parse {
    my ( $self, $text ) = @_;

    my $state = $self->{state};
    my $buf = \$self->{buffer};

    $$buf .= $text;

    if ( $state == 0 ) {
        # We're waiting for a start line (and ignoring any empty lines
        # before it) followed by message headers and a blank line.

        while ( $$buf =~ /^($CRLF)/ ) {
            substr( $$buf, 0, length($1), '' );
        }

        if ( $$buf =~ /$CRLF$CRLF/ ) {
            $self->parse_head( substr( $$buf, 0, $+[0], '' ) );

            return unless defined( my $r = $self->{object} );
            if ( defined( my $te = $r->header( "Transfer-Encoding" ) ) ) {
                $te =~ s/[ \t]*//g;
                if ( $te ne "chunked" ) {
                    $self->{error} = "Unknown transfer encoding: '$te'";
                    return;
                }
                $state = 2;
            }
            elsif ( defined( my $cl = $r->header( "Content-Length" ) ) ) {
                $state = 1;
            }
            else {
                $state = 3;
            }
        }
    }

    if ( $state == 1 ) {
        # We have the headers; now we're waiting for a non-chunked entity
        # body. Do we have the whole thing yet?

        my $cl = $self->{object}->content_length();
        if ( length $$buf >= $cl ) {
            my $body = substr( $$buf, 0, $cl, '' );
            $self->{object}->content( $body );
            $self->{message} .= $body;
            $state = 3;
        }
    }

    if ( $state == 2 ) {
        # We have the headers; now we're reading the chunks of data that
        # make up the entity body. While there's a chunk description...

        while ( $$buf =~ /^([0-9A-Fa-f]+)[^\x0D\x0A]*($CRLF)/ ) {
            my $desc = $+[0];
            my $bytes = hex $1;
            my $end = length $2;

            # We're expecting a chunk of $bytes bytes
            if ( $bytes ) {
                my $cl = $desc + $bytes + $end;
                if ( length $$buf >= $cl ) {
                    $self->debug( "Got chunk of $bytes bytes" );
                    my $chunk = substr( $$buf, 0, $cl, '' );
                    if ( $chunk !~ /$CRLF$/s ) {
                        $self->{error} = "Chunk data not terminated by CRLF";
                        return;
                    }
                    my $data = substr( $chunk, $desc, -$end );
                    $self->{object}->add_content( $data );
                    $self->{message} .= $chunk;
                }
                else {
                    last;
                }
            }
            else {
                if ( $$buf =~ /($CRLF$CRLF)/ ) {
                    $self->debug( "Got last chunk" );
                    my $chunk = substr( $$buf, 0, $+[0], '' );
                    my $data = substr( $chunk, $desc, -length $2 );
                    if ( $data ne '' ) {
                        # XXX: We'll strip TE in requests, so we should
                        # never receive a trailer that we can't discard.
                        # (Note, however, that we do forward it anyway.)
                        $self->debug( "Ignoring trailer in chunked message" );
                    }
                    $self->{message} .= $chunk;
                    $state = 3;
                    last;
                }
            }
        }
    }

    if ( $state == 3 ) {
        # We're all done.
    }

    $self->{state} = $state;
}

sub parse_head {
    my ($self, $head) = @_;

    my @lines = split /$CRLF/, $head;

    my $start = $lines[0];
    if ( ( $self->{type} == 0 &&
           $start !~ /^$TOKEN[ \t]+[^ ]+[ \t]+$VERSION$/ ) or
         ( $self->{type} == 1 &&
           $start !~ /^$VERSION[ \t]+\d\d\d[ \t]+[^\x00-\x1F\x7F]*$/i ) )
    {
        $self->{error} = "Unparsable start line: '$start'";
        return;
    }

    my $class = qw(HTTP::Request HTTP::Response)[ $self->{type} ];
    $self->{object} = $class->parse( join "\x0A", @lines );
    $self->{message} = $head;

    $self->debug( Data::Dumper::Dumper( $self->{object} ), 2 );
}

sub has_message {
    return shift->{state} >= 3;
}

package Filter::HTTP;

our @ISA = qw(POE::Filter);
use HTTP::Status qw(status_message);

sub new {
    my ($class, $type, $verbose) = @_;
    die "Filter type must be 0 or 1" unless defined $type;

    my $self = {
        buffer => [],
        parser => HTTP::MessageParser->new( $type, $verbose )
    };
    bless $self, $class;
}

sub _type { shift->{parser}->{type} }
sub _verbose { shift->{parser}->{verbose} }

sub clone {
    my $old = shift;
    my $new = {
        buffer => [],
        parser =>
            HTTP::MessageParser->new( $old->_type(), $old->_verbose() )
    };
    return bless $new, ref $old;
}

sub get_one_start {
    my ($self, $data) = @_;
    push @{ $self->{buffer} }, $_ foreach @$data;
}

sub get_one {
    my $self = shift;
    my $events = [];
    my $parser = $self->{parser};

    return [] unless @{ $self->{buffer} };
    my $string = shift @{ $self->{buffer} };

    $parser->parse( $string );
    if ( $parser->{error} ) {
        push @$events, undef;
        print "ERROR: ", $parser->{error}, "\n";
    }
    elsif ( $parser->has_message() ) {
        push @$events, { text => $parser->{message},
                         object => $parser->{object} };
        $parser->reset();
    }

    return $events;
}

sub get_pending {
    my $self = shift;
    my $pending = [];

    my $data = $self->{parser}->{buffer};
    push @$pending, $$data if $$data;
    push @$pending, @{ $self->{buffer} };
    return unless @$pending;
    return $pending;
}

sub put {
  my $self = shift;
  my $return;
  if ( $self->_type() == 0 ) {
     $return = $self->_put_response( @_ );
  }
  else {
     $return = $self->_put_request( @_ );
  }
  $return;
}

sub _put_response {
  my ($self, $responses) = @_;
  my @raw;

    foreach (@$responses) {
        if ( ref $_ eq 'HTTP::Response' ) {
            my $code           = $_->code;
            my $status_message = status_message($code) || "Unknown Error";
            my $message        = $_->message  || "";
            my $proto          = $_->protocol || 'HTTP/1.0';

            my $status_line = "$proto $code";
            $status_line   .= " ($status_message)"  if $status_message ne $message;
            $status_line   .= " $message" if length($message);

            my @headers;
            push @headers, $status_line;
            push @headers, $_->headers_as_string("\x0D\x0A");

            push @raw, join("\x0D\x0A", @headers, "") . $_->content;
        }
        else {
            push @raw, $_;
        }
    }

    \@raw;
}

sub _put_request {
    my ($self, $requests) = @_;
    my $total = 0;
    my @raw;

    foreach (@$requests) {
        if ( ref $_ eq 'HTTP::Request' ) {
            my $req_line = $_->method || "-";
            my $uri = $_->uri;
            $uri = (defined $uri) ? $uri->as_string : "-";
            $req_line .= " $uri";
            my $proto = $_->protocol;
            $req_line .= " $proto" if $proto;

            my @headers;
            push @headers, $req_line;
            push @headers, $_->headers_as_string("\x0D\x0A");

            push @raw, join("\x0D\x0A", @headers, "") . $_->content;
            $total += length $raw[$#raw];
        }
        else {
            push @raw, $_;
            $total += length $_;
        }
    }

    print ">>> Sending $total bytes\n" if $self->_verbose();

    \@raw;
}

=pod

=head1 NAME

i34-record - A transparent web proxy that records requests and responses.

=head1 SYNOPSIS

i34-record from 127.0.0.1:8889 to www.example.org:80 in a

=head1 DESCRIPTION

The command shown above will start i34-record, which will accept HTTP
requests on C<127.0.0.1:8889> and relay them to the origin server at
C<www.example.org:80> and store a complete session transcript in the
directory named F<a>.

Later, C<i34-record> can be restarted (with a different log directory)
and C<i34-replay> can use the transcript in F<a> to recreate requests
and resend them through the proxy server. Then the two transcripts can
be compared using C<i34-diff>.

The local and remote servers must be specified in "host:port" format
(both hostnames and IP addresses are fine). The default port for the
origin server is 80. There is no default for the local server.

The directory name is optional. If not specified, one will be generated
based on the date and a sequence number. (That is, if it is 2009-03-20
and a directory named 20090320-1 exists, then 20090320-2 will be used.)
It is an error to specify a directory that already exists; this is to
make it harder to inadvertently overwrite old session transcripts.

The words "from", "to", and "in" are also optional.

The transcript directory contains a file named F<journal> which lists
all the client connections and, for each connection, a numbered file
that stores the requests and responses sent and received over that
connection. Non-text message bodies are stored separately in files
of their own.

These transcripts are in a human-readable format, where lines from the
client are prefixed with "C: ", and lines from the server with "S: ".

See L<http://toroid.org/inspector34> for more.

=head1 AUTHOR

Abhijit Menon-Sen <ams@toroid.org>

=head1 COPYRIGHT

Copyright 2009 Abhijit Menon-Sen <ams@toroid.org>

This program may be used, modified, or redistributed freely, provided
that modified versions are clearly identified as being different from
the original, and that copyright notices and acknowledgements are not
removed from the code or the accompanying documentation.

This program is provided without any warranty, express or implied. In
no event shall the author or contributors to this program be liable
for any damages arising from its use.

=head1 SEE ALSO

i34-replay, i34-diff
